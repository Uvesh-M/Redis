name: version 3 Backend Application and Configuration

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: "Select the Google Cloud Project"
        required: true
        type: string
        default: bo-stage
        options:
          - bo-stage
          - bo-prod
          - bo-dev
      region:
        description: "Select the Region"
        required: true
        type: string
        default: asia-south1
        options:
          - asia-south1
          - us-central1
          - europe-west1
      artifact_repo:
        description: "Select the Artifact Repository"
        required: true
        type: string
        default: bo-backend-django
        options:
          - bo-backend-django
          - bo-backend-node
          - bo-backend-go
      services_order:
        description: "Specify services to deploy (comma-separated)"
        required: false
        type: string
        default: "main,migration,beat,sockets,streamer"
      branch_name:
        description: "Branch to run the workflow on"
        required: true
        type: string
        default: "fearture/docker-gcp-support"

env:
  IMAGE_NAME: backend-application

jobs:
  setup:
    uses: ./.github/workflows/install.yml
    secrets: inherit

  deploy:
    needs: setup
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up GCP authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2.1.2
        with:
          project_id: ${{ inputs.project_id }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Trigger Client Workflow
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TRIGGER_REPO_PAT }}
          script: |
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: 'code-owner-betteropinions',
              repo: 'BetterOpinions-BE-Django',
              workflow_id: 'build_push_gcp.yml',  
              ref: '${{ inputs.branch_name }}',  
              inputs: {
                run_id: '${{ github.run_id }}'
              }
            });
            core.info('Triggered client workflow: build_push_gcp.yml on branch ${{ inputs.branch_name }}');

      - name: Wait for Client Workflow Success
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TRIGGER_REPO_PAT }}
          script: |
            const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));
            const maxAttempts = 30;  
            const interval = 60 * 1000; 
            let attempts = 0;
            let success = false;

            while (attempts < maxAttempts) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: 'code-owner-betteropinions',
                repo: 'BetterOpinions-BE-Django',
                workflow_id: 'build_push_gcp.yml',
                branch: 'fearture/docker-gcp-support',  
                status: 'completed',
                per_page: 5  
              });

              const recentRuns = runs.data.workflow_runs;
              const targetRun = recentRuns.find(run => 
                run.status === 'completed' && 
                new Date(run.created_at) > new Date(Date.now() - 10 * 60 * 1000)
              );

              if (targetRun) {
                if (targetRun.conclusion === 'success') {
                  success = true;
                  core.info(`Client workflow succeeded. Run ID: ${targetRun.id}`);
                  break;
                } else {
                  core.setFailed(`Client workflow completed but failed. Run ID: ${targetRun.id}`);
                  break;
                }
              }

              core.info(`Waiting for client workflow to complete... Attempt ${attempts + 1}`);
              await wait(interval);
              attempts++;
            }

            if (!success) {
              core.setFailed('Client workflow did not complete successfully or timed out.');
            }

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials autopilot-bo-cluster --region ${{ inputs.region }} --project ${{ inputs.project_id }}

      - name: Deploy Services
        id: deploy-services
        run: |
          IFS=',' read -ra SERVICES <<< "${{ inputs.services_order }}"

          for SERVICE in "${SERVICES[@]}"; do
            SERVICE=$(echo $SERVICE | tr -d ' ')
            if [ -d "application-${SERVICE}" ]; then
              echo "Deploying application-${SERVICE}"
              
              # Use the old release name for main service
              RELEASE_NAME="backend-${SERVICE}"
              if [ "$SERVICE" = "main" ]; then
                RELEASE_NAME="backend-application"
              fi
              
              # Deploy the service
              if ! helm upgrade --install "${RELEASE_NAME}" "./application-${SERVICE}" --set image.tag=${{ github.sha }}; then
                echo "Deployment failed for ${SERVICE}"
                
                # Rollback this specific service
                LAST_REVISION=$(helm history "${RELEASE_NAME}" -o json | jq -r '.[] | select(.status == "deployed") | .revision' | sort -rn | head -n 1)
                if [ -n "$LAST_REVISION" ]; then
                  echo "Rolling back ${RELEASE_NAME} to revision $LAST_REVISION"
                  helm rollback "${RELEASE_NAME}" $LAST_REVISION
                fi
                
                echo "::error::Failed to deploy ${SERVICE}"
                continue
              fi
              
              echo "Successfully deployed ${SERVICE}"
            else
              echo "Warning: Directory application-${SERVICE} not found, skipping..."
            fi
          done

      - name: Deployment Status
        run: |
          # Check status of each service
          IFS=',' read -ra SERVICES <<< "${{ inputs.services_order }}"
          FAILED=false

          for SERVICE in "${SERVICES[@]}"; do
            SERVICE=$(echo $SERVICE | tr -d ' ')
            if helm status "backend-${SERVICE}" &>/dev/null; then
              STATUS=$(helm status "backend-${SERVICE}" -o json | jq -r '.info.status')
              echo "${SERVICE} Status: $STATUS"
              if [ "$STATUS" != "deployed" ]; then
                FAILED=true
              fi
            else
              echo "${SERVICE} not deployed"
            fi
          done

          if [ "$FAILED" = true ]; then
            echo "One or more deployments failed"
            exit 1
          fi
