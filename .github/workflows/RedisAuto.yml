name: Deploy Redis to GKE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: bo-stage
  GKE_CLUSTER: better-staging
  GKE_ZONE: asia-south1
  VALUE_PATH: values.yaml
  DEPLOYMENT_NAME: redis
  NAMESPACE: redis

jobs:
  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Install gke-gcloud-auth-plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin
        echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
    - name: Get GKE credentials
      run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE" --project "$PROJECT_ID"
    - name: Verify kubectl configuration
      run: |
        kubectl config view
        kubectl cluster-info
    
    - name: Check Cluster Resources
      run: |
        echo "Checking node capacity..."
        kubectl describe nodes
        echo "Checking existing pods..."
        kubectl get pods -A
        
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.8.0'

    - name: Create Namespace
      run: |
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Add Bitnami Helm Repository
      run: |
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo update
        
    - name: Deploy Redis
      run: |
        # Function to check if release exists
        check_release_exists() {
          helm status $DEPLOYMENT_NAME -n $NAMESPACE >/dev/null 2>&1
        }

        # Function to cleanup existing release
        cleanup_existing_release() {
          echo "Existing release found. Starting cleanup..."
          helm uninstall $DEPLOYMENT_NAME -n $NAMESPACE

          local retries=30
          local wait_time=10
    
          for ((i=1; i<=retries; i++)); do
            if ! check_release_exists; then
              echo "✅ Existing release successfully uninstalled."
              return 0
            fi
            echo "⏳ Waiting for release uninstallation (Attempt $i of $retries)..."
            sleep $wait_time
          done

          echo "❌ Failed to uninstall existing release within timeout."
          return 1
        }

        # Main deployment logic
        if check_release_exists; then
          cleanup_existing_release || exit 1
        fi

        echo "📦 Installing/Upgrading Redis..."
        if helm upgrade --install $DEPLOYMENT_NAME bitnami/redis \
          --namespace $NAMESPACE \
          --values ./values.yaml \
          --set master.service.type=ClusterIP \
          --set master.persistence.storageClass=standard-rwo \
          --set master.persistence.size=8Gi \
          --set replica.replicaCount=1 \
          --set auth.enabled=true \
          --set auth.password=${{ secrets.REDIS_PASSWORD }} \
          --set master.service.ports.redis=6379 \
          --set replica.service.name="redis-replicas" \
          --set replica.service.ports.redis=6379 \
          --set master.containerPorts.redis=6379 \
          --set replica.containerPorts.redis=6379 \
          --set replica.replicaCount=1 \
          --set master.livenessProbe.initialDelaySeconds=30 \
          --set master.livenessProbe.periodSeconds=10 \
          --set master.readinessProbe.initialDelaySeconds=30 \
          --set master.readinessProbe.periodSeconds=10 \
          --set replica.livenessProbe.initialDelaySeconds=30 \
          --set replica.livenessProbe.periodSeconds=10 \
          --set replica.readinessProbe.initialDelaySeconds=30 \
          --set replica.readinessProbe.periodSeconds=10 \
          --set replica.dnsPolicy=ClusterFirst \
          --set master.dnsPolicy=ClusterFirst \
          --set sentinel.enabled=false \
          --wait --timeout 15m
    
        # If deployment fails, get more information
        if [ $? -ne 0 ]; then
          echo "❌ Deployment failed. Gathering debugging information..."
    
          echo "📊 Pod Status:"
          kubectl get pods -n $NAMESPACE -l app.kubernetes.io/instance=$DEPLOYMENT_NAME
    
          echo "\n🔍 Pod Details:"
          kubectl describe pods -n $NAMESPACE -l app.kubernetes.io/instance=$DEPLOYMENT_NAME
    
          echo "\n🌐 Services:"
          kubectl get svc -n $NAMESPACE -l app.kubernetes.io/instance=$DEPLOYMENT_NAME
    
          echo "\n📝 Events:"
          kubectl get events -n $NAMESPACE --sort-by='.lastTimestamp'
    
          # Check DNS resolution
          echo "\n🔍 Testing DNS resolution from a test pod:"
          kubectl run -n $NAMESPACE dns-test --rm -i --tty --image=busybox --restart=Never -- nslookup redis-master-0.redis-headless.redis.svc.cluster.local
    
          exit 1
        fi

        # Verify the deployment
        echo "✅ Verifying deployment..."
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=$DEPLOYMENT_NAME -n $NAMESPACE --timeout=5m
  
        if [ $? -eq 0 ]; then
          echo "✅ Redis deployment successful!"
        else
          echo "❌ Redis deployment verification failed!"
          exit 1
        fi
  
    - name: Verify Deployment
      run: |
        kubectl get pods -n $NAMESPACE
        kubectl get svc -n $NAMESPACE
