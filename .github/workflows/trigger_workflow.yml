name: Trigger and Monitor Client Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      branch_name:
        required: true
        type: string
    secrets:
      TRIGGER_REPO_PAT:
        required: true

jobs:
  trigger-and-monitor:
    runs-on: ubuntu-22.04
    steps:
      - name: Trigger Client Workflow
        id: trigger
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TRIGGER_REPO_PAT }}
          script: |
            try {
              const response = await github.rest.actions.createWorkflowDispatch({
                owner: 'code-owner-betteropinions',
                repo: 'BetterOpinions-BE-Django',
                workflow_id: 'build_push_gcp.yml',
                ref: '${{ inputs.branch_name }}',
                inputs: {
                  run_id: '${{ github.run_id }}',
                  environment: '${{ inputs.environment }}'
                }
              });
              console.log('Triggered client workflow successfully');
            } catch (error) {
              core.setFailed(`Failed to trigger workflow: ${error.message}`);
            }

      - name: Wait for Client Workflow
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TRIGGER_REPO_PAT }}
          script: |
            const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));
            const maxAttempts = 30;
            const interval = 60 * 1000;
            let attempts = 0;

            while (attempts < maxAttempts) {
              try {
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: 'code-owner-betteropinions',
                  repo: 'BetterOpinions-BE-Django',
                  workflow_id: 'build_push_gcp.yml',
                  branch: '${{ inputs.branch_name }}',
                  per_page: 5
                });

                const recentRun = runs.data.workflow_runs[0];
                if (recentRun && recentRun.status === 'completed') {
                  if (recentRun.conclusion === 'success') {
                    core.info(`Client workflow succeeded. Run ID: ${recentRun.id}`);
                    return;
                  } else {
                    core.setFailed(`Client workflow failed. Run ID: ${recentRun.id}`);
                    return;
                  }
                }
              } catch (error) {
                core.warning(`Error checking workflow status: ${error.message}`);
              }

              core.info(`Waiting for client workflow... Attempt ${attempts + 1}/${maxAttempts}`);
              await wait(interval);
              attempts++;
            }
            
            core.setFailed('Client workflow monitoring timed out');
